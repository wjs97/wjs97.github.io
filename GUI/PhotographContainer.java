/**
 * Homework 3 William Sayre , wjs9ej Sources : Big Java Book, Stack Overflow (Cited where used)
 */
import java.util.ArrayList;
import java.util.HashSet;


public abstract class PhotographContainer {
    /**
     * Holds a name describing each Albums
     */
    protected String name; 

    /**
     * Holds the photos which each album contains
     */
    protected ArrayList<Photograph> photos;

    /**
     * "Getter" which returns the name of an album
     * @return this.name name of photograph 
     */
    public String getName() { // getters
        return this.name;
    }

    /**
     * "Getter" which returns the photos which comprise an album
     * @return this.photos photographs in album 
     */
    public ArrayList<Photograph> getPhotos() { // getters
        return this.photos;
    }

    /**
     * "Setter" which changes the name describing this album
     * @param name this is new name which describes album

     */
    public void setName(String name) {
        this.name = name;

    }
    /** Constructs PhotographContainer Superclass */
    public PhotographContainer(String name) {
        ArrayList<Photograph> photos = new ArrayList<Photograph>();
        this.name = name;
        this.photos = photos;
    }

    /**
     * Tests to see if a photograph is already in this album. If the  photograph is not found, it is added to the album.
     * Returns true if new photograph was succesfully added, returns false otherwise
     * @param p new photograph to add to album
     * @return true if new photograph succesfully added, false otherwise 
     * 
     */

    public boolean addPhoto(Photograph p) {
        if (p == null) { //returns false if p is invalid 
            return false;
        }

        if (!this.hasPhoto(p)) {//adds p to Album if it is not already contained 
            photos.add(p);
            return true;
        }

        return false;
    }
    /**
     * Tests to see if a photograph is already in this album. If the  photograph is found, method returns true.
     * If not, method returns false 
     * @param p new photograph to search album for
     * @return true if new photograph found, false otherwise 
     * 
     */
    public boolean hasPhoto(Photograph p) {
        if (photos.contains(p)) {
            return true;
        }

        return false;
    }
    /**
     * Tests to see if a photograph is already in this album. If the  photograph is found, photograph is removed
     * from the album and method returns true. Otherwise, method returns false.
     * @param p new photograph to search album for
     * @return true if photograph found and removed, false otherwise 
     * 
     */
    public boolean removePhoto(Photograph p) {
        if (this.hasPhoto(p)) { //checks whether Album contains p
            photos.remove(p);
            return true;
        }

        return false;
    }
    /**
     * Returns the number of photographs in the album
     * @return size of the photos arrayList in album
     *  */
    public int numPhotographs () {
        return photos.size();

    }

    /**
     * Overrides the Object Class default toString() method. Returns string containing this Album's name and photos
     * @return this.name and this.photos, these are the fields of this Album
     */
    public String toString () {
        return ("Name: " + this.name + "\n" + "Photos: " + this.photos);

    }
    /**
     * Overrides default hashCode method of Object class to produce a unique integer for each album. 
     * @return hash code generated by the album's filename  

     */
    public int hashCode() {
        int Output = this.name.hashCode();
        return Output;


    }
    /**
     * Creates an Array List which contains all photos contained
     * in this library which are above a certain rating (which is passed
     * in as an argument. First tests to make sure rating is valid, and returns
     * null if it is not. Then iterates through this photo libraries
     * photos and adds them to output ArrayList if they are above argument rating
     * @param rating rating which photos need to be returned
     * @return arrayList of photos with rating greater than or equal to argument rating
     * 
     */

    public ArrayList<Photograph> getPhotos(int rating) {
        if (rating > 5 || rating <0) {
            return null;
        }
        else {
            ArrayList<Photograph> output = new ArrayList<Photograph>();
            for (int i =0;  i < this.photos.size(); i++) //iterates through existing photos
            {
                if (photos.get(i).getRating() >= rating) { 
                    output.add(photos.get(i));
                }
            }
            return output;
        }
    }
    /**
     * First tests whether argument year is valid, and returns null if it is not. Uses 
     * Date Class's year method to convert argument date into an integer form of its year. 
     * Iterates through this photo libraries existing photos and adds any photo
     * that was taken in same year as argument year to output ArrayList
     * @param year this is year that we want to return photos taken during
     * @return arraylist of photos taken during argument year 
     * 
     */
    public ArrayList<Photograph> getPhotosInYear(int year) {
        ArrayList<Photograph> output = new ArrayList<Photograph>();
        if (year < 1901) {
            return null;   
        }
        for (int i = 0;  i < this.photos.size(); i++) //iterates through PhotoLibraries photos
        {
            Date testDate = new Date (photos.get(i).getDateTaken()); //Creates Date Object out of argument date
            if (testDate.year == year) { 
                output.add(photos.get(i));
            }

        }
        return output;

    }
    /**
     * First tests whether argument month and year are valid, and returns null if they are not. 
     * Then iterates through this photo libraries existing photos. Then uses 
     * Date Class's month and year methods to convert argument dates into an integer form. Finally
     * adds any photo that was taken in same year and month as arguments to output ArrayList
     * @param month this is month that we want to return photos taken during
     * @return arrayList of photos taken during argument month 
     * 
     */
    public ArrayList<Photograph> getPhotosInMonth(int month, int year) {
        ArrayList<Photograph> output = new ArrayList<Photograph>();
        if (year < 1901 || month < 1 || month > 12) {// makes sure date argument valid
            return null;   
        }
        for (int i = 0;  i < this.photos.size(); i++)
        {
            Date testDate = new Date (photos.get(i).getDateTaken());
            if (testDate.year == year && testDate.month == month) { //tests photos date and year
                output.add(photos.get(i));
            }

        }
        return output;
    }
    /**
     * First creates Date Objects using begin/end date arguments. Uses Date class's getintDate()
     * method to convert these String arguments into ints. Returns null if either date is 
     * not in valid form, or if beginning date comes after end date. 
     * Then iterates through this libraries existing photographs, checking if they 
     * fall between beginning and end dates. All photos which fall in this range are added to output array list
     * @param month this is month that we want to return photos taken during
     * @return arrayList of photos taken during argument month 
     * 
     */
    public ArrayList<Photograph> getPhotosBetween(String beginDate, String endDate) {
        ArrayList<Photograph> output = new ArrayList<Photograph>();
        Date bd = new Date (beginDate);
        Date ed = new Date (endDate);
        int beginDateInt = bd.getIntDate(); //creates int form of argument dates using Date class method
        int endDateInt = ed.getIntDate();
        if(!bd.isValidDate() || !ed.isValidDate() || beginDateInt > endDateInt ) { //tests to see if date arguments are valid
            return null;
        }
        for (int i = 0;  i < this.photos.size(); i++)
        {
            Date testDate = new Date (photos.get(i).getDateTaken()); //creates date object
            int testDateInt = testDate.getIntDate();
            if (testDateInt >= beginDateInt && testDateInt <= endDateInt) {
                output.add(photos.get(i));
            }
        }
        return output;
    }


}


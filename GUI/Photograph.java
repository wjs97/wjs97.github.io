/**
 * Homework 3 William Sayre , wjs9ej Sources : Big Java Book, Stack Overflow (Cited where used)
 */

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashSet;

import javax.imageio.ImageIO;
import javax.swing.JLabel;

public class Photograph implements Comparable<Photograph> {
    /**
     * Holds a caption describing the Photograph
     */
    private String caption;

    /**
     * Holds the Photographs file name
     */
    private String filename;


    /**
     * Holds date photograph was taken
     */
    private String dateTaken;


    /**
     * Holds rating of photograph on scale from 0 to 5
     */

    private int rating;


    /**
     * Contains image's data
     */

    protected BufferedImage imageData;




    /**
     * Constructs an instance of Photograph class. Takes a caption and file name as its inputs
     */
    public Photograph(String caption, String filename) { 
        this.caption = caption;
        this.filename = filename;
        this.rating = 0;
        this.dateTaken = "1901-01-01"; //default
        this.imageData = null;
        if (loadImageData(filename)) {
            loadImageData(filename);
        }

    }


    /**
     * Constructs an instance of Photograph class. Takes a caption, rating, the date taken and file name as its inputs
     */
    public Photograph(String caption, String filename, String dateTaken, int rating) { 
        this.caption = caption;  
        this.filename = filename;

        if (rating <= 5 && rating >=0) {
            this.rating = rating;
        }
        else {
            rating = 0;
        }
        Date dateT = new Date(dateTaken); //uses Date class object to test validity of date
        if (dateT.isValidDate()) { // if date is valid, its passed through to this Photographs fields
            this.dateTaken = dateT.getStringDate();
        }
        else {
            this.dateTaken = "1901-01-01"; //Invalid date is converted to default 
        }
        if (loadImageData(filename)) {
            loadImageData(filename);
        }


    }

    /**
     * "Getter" which returns a photo's caption
     * @return this.caption The Photograph's file name
     */
    public String getCaption() { // getters
        return this.caption;
    }
    /**
     * "Getter" which returns a photo's file name
     * @return this.filename The Photograph's file name
     */
    public String getFilename() {
        return this.filename;
    }
    /**
     * "Getter" which returns the date a photo was taken
     * @return this.dateTaken The date photo was taken 
     */
    public String getDateTaken() { // getters
        return this.dateTaken;
    }
    /**
     * "Getter" which returns the date a photograph was taken
     * @return this.rating the photos rating
     */
    public int getRating() { // getters
        return this.rating;
    }
    /**
     * "Getter" which returns the a reference to this photo's image data
     * @return this.imageData the photos image data
     */
    public BufferedImage getimageData() {
        return this.imageData;
    }


    /**
     * "Setter" which changes the rating describing this photograph
     * @param newrating this is new rating which describes photograph

     */
    public void setRating(int newrating) {
        if (newrating <= 5 && newrating >=0) {
            this.rating = newrating;
        }
        else {
            this.rating = 0;
        }


    }
    /**
     * "Setter" which changes the rating describing this photograph
     * @param newrating this is new rating which describes photograph

     */
    public void setCaption(String newcaption) {
        this.caption = newcaption;

    }
    /**
     * "Setter" which changes the imageData of this photograph
     * @param newImage new image data of photo

     */
    public void setImageData(BufferedImage newImage) {
        this.imageData = newImage;

    }



    /**
     * Overrides default hashCode method of Object class to produce a unique integer for each photograph. 
     * @return hash code generated by the photographs filename  

     */
    public int hashCode() {
        int Output = this.filename.hashCode();
        return Output;


    }    



    /**
     * Overrides the Object Class default equals() method. Checks whether two Photographs are identical.
     * First tests whether argument o is an instance of Photograph class. Then casts o into Photograph class, renaming
     * it other finally compares the caption and filename fields of this Photograph and other.
     * Returns true if both instances of Photograph have identical fields, returns false otherwise. 
     * @param o, Object we are comparing this Photograph to
     * @return Whether o is a Photograph with fields identical to this Photograph
     */
    public boolean equals(Object o) { // equals
        if (o instanceof Photograph) {
            Photograph other = (Photograph) o;
            if ((this.caption.equals(other.caption) && (this.filename.equals(other.filename)))) { //tests fields of this photo and argument o 
                return true;
            }
        }
        return false;
    }
    /**
     * Overrides the Object Class default toString() method. Returns string containing this Photographs Caption and File Name
     * @return this.caption and this.filename, these are the fields of this Photograph
     */
    public String toString() {
        return ("Caption: " + this.caption + "\n" + "File Name: " + this.filename);
    }
    /**
     * Implements the Comparable interface. First uses String compareTo to compare this photographs dateTaken with argument photographs dateTaken. If this returns 0, compares this Photographs caption with argument Photographs.
     * @return integer value which represents relative order of this Photograph and argument Photograph.
     */
    public int compareTo(Photograph p) {
        if ((this.dateTaken.compareTo(p.getDateTaken())) != 0) {
            return this.dateTaken.compareTo(p.getDateTaken());
        }
        return this.caption.compareTo(p.getCaption());



    }
    /**
     * Given a filename as a String, this method loads the Image data from the file and stores it into the imageData field. The filename is stored in the filename field. This method returns true on success and false on failure
     * @return true if image successfully loaded, false if not.
     */
    public boolean loadImageData(String filename) {
        try {
            BufferedImage img = ImageIO.read(new File(filename));
            this.filename = filename;
            this.imageData = img;
            return true;
        } catch (IOException e ) {
            System.out.println(e.getMessage());
            System.out.println("IOException. loadImageData failed.");
            return false;
        }


    }
}



